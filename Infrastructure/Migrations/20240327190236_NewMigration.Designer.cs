// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AngularApp.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240327190236_NewMigration")]
    partial class NewMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AccommodationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BathroomNumber")
                        .HasColumnType("int");

                    b.Property<int>("BedroomNumber")
                        .HasColumnType("int");

                    b.Property<int?>("Facility")
                        .HasColumnType("int");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<int?>("HeatingType")
                        .HasColumnType("int");

                    b.Property<int?>("InternetSpeed")
                        .HasColumnType("int");

                    b.Property<string>("LivingDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxFloor")
                        .HasColumnType("int");

                    b.Property<int>("ParkingNumber")
                        .HasColumnType("int");

                    b.Property<float>("ParkingRent")
                        .HasColumnType("real");

                    b.Property<int?>("ParkingType")
                        .HasColumnType("int");

                    b.Property<int?>("PetAllowance")
                        .HasColumnType("int");

                    b.Property<float>("UsableArea")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("AccommodationDetail");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("WalletId");

                    b.ToTable("Agent");
                });

            modelBuilder.Entity("Domain.Entities.ContactDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Salutation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ContactDetail");
                });

            modelBuilder.Entity("Domain.Entities.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactMessage");
                });

            modelBuilder.Entity("Domain.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccommodationType")
                        .HasColumnType("int");

                    b.Property<int?>("ContactDetail")
                        .HasColumnType("int");

                    b.Property<int?>("EfficiencyClass")
                        .HasColumnType("int");

                    b.Property<string>("Headline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LandSize")
                        .HasColumnType("real");

                    b.Property<int?>("Property")
                        .HasColumnType("int");

                    b.Property<string>("PropertyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RentalFee")
                        .HasColumnType("int");

                    b.Property<int>("ResidenceCertificate")
                        .HasColumnType("int");

                    b.Property<float>("RoomNumber")
                        .HasColumnType("real");

                    b.Property<int?>("User")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactDetail");

                    b.HasIndex("Property");

                    b.HasIndex("RentalFee");

                    b.HasIndex("User");

                    b.ToTable("Listing");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccommodationDetailId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VacantTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccommodationDetailId");

                    b.HasIndex("AddressId");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Domain.Entities.RentalFee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("BasicRent")
                        .HasColumnType("real");

                    b.Property<float>("Deposit")
                        .HasColumnType("real");

                    b.Property<float>("ExtraCost")
                        .HasColumnType("real");

                    b.Property<float>("HeatingCost")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("RentalFee");
                });

            modelBuilder.Entity("Domain.Entities.Subcription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Subcription")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubcriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubcriptionDuration")
                        .HasColumnType("int");

                    b.Property<int?>("SubcriptionPack")
                        .HasColumnType("int");

                    b.Property<int?>("SubcriptionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Subcription");

                    b.ToTable("Subcription");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgentId")
                        .HasColumnType("int");

                    b.Property<int?>("AgentRole")
                        .HasColumnType("int");

                    b.Property<int>("ContactDetailId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgentId");

                    b.HasIndex("ContactDetailId");

                    b.HasIndex("WalletId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Balance")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.HasOne("Domain.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Domain.Entities.Listing", b =>
                {
                    b.HasOne("Domain.Entities.ContactDetail", "ListingContactDetail")
                        .WithMany()
                        .HasForeignKey("ContactDetail");

                    b.HasOne("Domain.Entities.Property", "ListingProperty")
                        .WithMany()
                        .HasForeignKey("Property");

                    b.HasOne("Domain.Entities.RentalFee", "ListingRentalFee")
                        .WithMany()
                        .HasForeignKey("RentalFee");

                    b.HasOne("Domain.Entities.User", "ListingUser")
                        .WithMany()
                        .HasForeignKey("User");

                    b.Navigation("ListingContactDetail");

                    b.Navigation("ListingProperty");

                    b.Navigation("ListingRentalFee");

                    b.Navigation("ListingUser");
                });

            modelBuilder.Entity("Domain.Entities.Property", b =>
                {
                    b.HasOne("Domain.Entities.AccommodationDetail", "AccommodationDetails")
                        .WithMany()
                        .HasForeignKey("AccommodationDetailId");

                    b.HasOne("Domain.Entities.Address", "AddressDetail")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.Navigation("AccommodationDetails");

                    b.Navigation("AddressDetail");
                });

            modelBuilder.Entity("Domain.Entities.Subcription", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany("Subcriptions")
                        .HasForeignKey("Subcription");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Agent", null)
                        .WithMany("Users")
                        .HasForeignKey("AgentId");

                    b.HasOne("Domain.Entities.ContactDetail", "ContactDetails")
                        .WithMany()
                        .HasForeignKey("ContactDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Wallet", "WalletDetail")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactDetails");

                    b.Navigation("WalletDetail");
                });

            modelBuilder.Entity("Domain.Entities.Agent", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Subcriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
